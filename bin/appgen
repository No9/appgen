#!/usr/bin/env node


"use strict";

var common = require('../lib/common')

var fs   = common.fs
var fspath = common.fspath

var _    = common._
var eyes = common.eyes
var CSON = common.cson


var AppGen = common.appgen.AppGen



function err(win) {
  return function(err,data) {
    if( err ) {
      common.exitmsg( err.message || err )
    }
    else win(data);
  }
}

function fileerr(win) {
  return function(err,data) {
    if( err ) {
      if( 'ENOENT' === err.code ) {
        common.exitmsg( "can't read file: "+err.path )
      }
      else {
        common.exitmsg( err.message || err )
      }
    }
    else win(data);
  }
}



function loadspecfile(specfilepath,cb) {
  fs.readFile(specfilepath,'utf8',fileerr(function( text ){
    var spec 
    if( specfilepath.match(/json$/ )  ) {
      spec = JSON.parse(text)
      cb(null,spec)
    }
    else if( specfilepath.match(/cson$/ ) ) {
      spec = CSON.parseSync(text)
      var err = spec instanceof Error ? spec : null
      cb(err,spec)
    }
    else if( specfilepath.match(/js$/ ) ) {
      try {
        spec = require(specfilepath)
        cb(null,spec)
      }
      catch( e ) {
        cb(e)
      }
    }
  }))
}


function cmdlinespec( argv, spec ) {
  spec.conf = common.deepoverride(spec.conf, argv.conf || {})
  spec.pref = common.deepoverride(spec.pref, argv.pref || {})
} 



var argv = common.optimist
  .usage("Usage: appgen specfile.[js|json|cson]")
  .boolean('v')
  .boolean('V')
  .check(function(argv){
    if( undefined == argv._[0] )         throw 'Error: no specfile.json';
    if( !/\.[cj]s(on)?$/.test(argv._[0]) )  throw 'Error: specfile must suffix .js, .json or .cson';
    return true
  })
  .argv




var appgen
var specfilepath = fspath.resolve( argv._[0] )
var specfolder = fspath.dirname(specfilepath)

// verbose = 0,1,2
// 0 = quiet
// 1 = forks
// 2 = all
var verbose = Math.min(2,Math.max(0, _.isNumber(argv.verbose) ? argv.verbose : argv.V ? 2 : argv.v ? 1 : 0 ))

loadspecfile(specfilepath,function(err,spec){
  if( err ) {
    console.error(err)
    process.exit(1)
  }

  spec.res  = spec.res || {}

  spec.conf = spec.conf || {}
  spec.pref = spec.pref || {}

  cmdlinespec(argv,spec)

  if( 2 <= verbose ) {
    eyes.inspect(spec)
  }

  spec.res.origin = spec.res.origin || specfolder

  appgen = new AppGen({
    spec:spec,
    msgs:{
      print:function(msg){console.log(msg)},

      error:function(err,mode){
        var forkname = err.ctxt.name
        var stepI    = err.ctxt.stepman.stepI-1
        var steps    = err.ctxt.stepman.steps
        var stepname = err.ctxt.stepman.steps[stepI].name
        var stepopt  = err.ctxt.stepman.steps[stepI].opt
        console.error('\nERROR: '+err.message+
                      ', STEP: '+forkname+':'+stepI+':'+stepname+' '+JSON.stringify(stepopt))

        if( mode.stack ) {
          console.error(err.stack)
        }
      }
    },
    verbose:verbose,
    specfile:specfilepath
  })

  appgen.exec()
  
})


