#!/usr/bin/env node


var common = require('../lib/common')

var fs   = common.fs
var path = common.path


var eyes = common.eyes
var CSON = common.cson


var AppGen = common.appgen.AppGen



function err(win) {
  return function(err,data) {
    if( err ) {
      common.exitmsg( err.message || err )
    }
    else win(data);
  }
}

function fileerr(win) {
  return function(err,data) {
    if( err ) {
      if( 'ENOENT' === err.code ) {
        common.exitmsg( "can't read file: "+err.path )
      }
      else {
        common.exitmsg( err.message || err )
      }
    }
    else win(data);
  }
}



function loadspecfile(specfilepath,cb) {
  fs.readFile(specfilepath,'utf8',fileerr(function( text ){
    var spec 
    if( specfilepath.match(/json$/ )  ) {
      spec = JSON.parse(text)
      cb(spec)
    }
    else if( specfilepath.match(/cson$/ ) ) {
      spec = CSON.parseSync(text)
      cb(spec)
    }
  }))
}


function cmdlinespec( argv, spec ) {
  spec.pref = common.deepoverride(spec.pref, argv.pref || {})
} 


var argv = common.optimist
    .usage("Usage: appgen specfile.json")
    .check(function(argv){
      if( undefined == argv._[0] )      throw 'Error: no specfile.json';
      if( !/\.[cj]son$/.test(argv._[0]) )  throw 'Error: specfile must have .json or .cson suffix';
      return true
    })
    .argv


var appgen
var specfilepath = argv._[0]
var specfolder = path.dirname(specfilepath)


loadspecfile(specfilepath,function(spec){

  cmdlinespec(argv,spec)

  eyes.inspect(spec)

  appgen = new AppGen({
    spec:spec,
    msgs:{
      print:function(msg){console.log(msg)},
      error:function(err){
        var forkname = err.ctxt.name
        var stepI = err.ctxt.stepman.stepI-1
        var steps = err.ctxt.stepman.steps
        var stepname = err.ctxt.stepman.steps[stepI].name
        var stepopts = err.ctxt.stepman.steps[stepI].opts
        console.error('ERROR: '+err.message+
                      ', STEP: '+forkname+':'+stepI+':'+stepname+' '+JSON.stringify(stepopts))
      }
    }
  })

  appgen.exec()
  
})


